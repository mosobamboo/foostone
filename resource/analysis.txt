DI
   v1:
	通过冗长的if else 实现动作。
	 1)新增武器需要修改if else处代码
	 2)重复代码，浪费精力
	 3)职责划分不清,后续扩展势必麻烦。(清晰的职责划分有利于开展工作，代码也是如此)

   v2:
	引入策略模式
	 1)没有冗长的if else 代码结构清晰
	 2)类的职责明确，提高内聚性
	 3)OCP ,策略模式使得我们添加新方案时不需要修改Role 和 Monster

		-策略的切换处，在决定生成那个服务类时还是需要进行一些判断，这里还是要修改代码
   v3:
	通过读取文件获取服务类
	1)无论如何还是有要判断的地方，读取文件中字段后判断要生成哪种服务类
	3)配置文件只是配置标记类型，后面的生成还是在代码里新增一组服务类要继续修改代码判断生成

   v4：
	反射
	 -解决服务类切换还要改代码判断生成对应服务类问题
	


Spring use case analysis:
	应用到了上面哪点，得到了什么样的优化。